#a.create a vector of weekdays
wkdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#b. Convert to `factor` and specify the `levels/labels`
df_imputed$partofweek <-  factor((weekdays(df_imputed$date) %in% wkdays)+1L,
levels=1:2, labels=c('weekend', 'weekday'))
#c. activity$partofweek
aggregate(steps ~ partofweek, df_imputed, sum, na.rm=TRUE)
#2.  Make a panel plot containing a time series plot (i.e. type = "l")
#    of the 5-minute interval (x-axis) and the average number of steps taken,
#    averaged across all weekday days or weekend days (y-axis).
#a. Make two panel plot
par(mfrow=c(2,1))
#b. Gather the weekday data first
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate the weekday mean fisrt
wd <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot the average interval graph for weekdays
plot(wd$steps ~ wd$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#b. Gather the weekday data first
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate the weekday mean fisrt
wd <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#b. Gather the weekday data first
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
## Loading and preprocessing the data
#1.  Load the Data
#a. Set working directory
setwd("C:/Users/david/Desktop/reproducibleresearch/courseproject1")
#b. Download activity file
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","activity.zip")
#c. Unzip activity file
unzip("activity.zip")
#d. Read activity file
df <- read.csv("activity.csv",sep=",")
#2. Process/transform the data (if necessary) into a format suitable for your analysis
#a.  Convert date to as.Date data type
df$date <- as.Date(df$date)
#b. provide information about activity file
str(df)
#c. return first records of activity file
head(df)
#d. return last records of activity file
tail(df)
## What is the mean total of steps taken per day?
#1. Calculate the total number of steps per day
# sum the total steps per day
total <- aggregate(steps ~ date, df, sum )
#2.  Make a histogram of the total number of steps taken per day
# plot the histogram and label
plot(total$steps ~ total$date, type="h", lwd = 5, ylab="Frequency (steps)", xlab="Activity Days")
#3. Calculate and report the mean and median of the total number of steps taken per day
# Reproducible Research: Course Project 1
## Loading and preprocessing the data
#1.  Load the Data
#a. Set working directory
setwd("C:/Users/david/Desktop/reproducibleresearch/courseproject1")
#b. Download activity file
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","activity.zip")
#c. Unzip activity file
unzip("activity.zip")
#d. Read activity file
df <- read.csv("activity.csv",sep=",")
#2. Process/transform the data (if necessary) into a format suitable for your analysis
#a.  Convert date to as.Date data type
df$date <- as.Date(df$date)
#b. provide information about activity file
str(df)
#c. return first records of activity file
head(df)
#d. return last records of activity file
tail(df)
## What is the mean total of steps taken per day?
#1. Calculate the total number of steps per day
# sum the total steps per day
total <- aggregate(steps ~ date, df, sum )
#2.  Make a histogram of the total number of steps taken per day
# plot the histogram and label
plot(total$steps ~ total$date, type="h", lwd = 5, ylab="Frequency (steps)", xlab="Activity Days")
#3. Calculate and report the mean and median of the total number of steps taken per day
#a. mean
mean(total$steps)
#b. median
median(total$steps)
##What is the average daily activity pattern?
#1.  Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#    and the average number of steps taken, averaged across all days (y-axis)
#a.  calculate mean steps by interval
df_interval <- aggregate(steps ~ interval, df, mean)
#b.  plotline chart and label
plot(df_interval$steps ~ df_interval$interval, type="l", xlab="5-min Intervals", ylab="Average Steps Taken")
#2.  Which 5-minute interval, on average across all the days in the dataset,
#    contains the maximum number of steps?
#a. maximum number of steps in df_interval
max_steps <- max(df_interval$steps)
#b. interval with maximum number of steps in df_interval
df_interval$interval[df_interval$steps==max_steps]
##Imputing missing values
#1 Calculate and report the total number of missing values in the dataset
sum(is.na(df$steps))
#2 Devise a strategy for filling in all of the missing values in the dataset.
##Fill in missing values(NA)  with 0
#3 Create a new dataset that is equal to the original
#  dataset but with the missing data (NA) filled in with 0.
#a.  create the new table to impute values for NA
df_imputed <- df
#b. replace NA with zero
df_imputed$steps[is.na(df_imputed$steps)] <- 0
#c. make sure there are no more NA's
sum(is.na(df_imputed$steps))
#4.  Make a histogram of the total number of steps taken each day
#a. sum the total steps per day
total_imputed  <- aggregate(steps ~ date, df_imputed, sum)
#b. plot histogram and label
plot(total_imputed$steps ~ total_imputed$date, type="h", lwd = 5, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
#c. Calculate and report the mean and median total number of steps taken per day.
mean(total_imputed$steps)
median(total_imputed$steps)
#d. Do these values differ from the estimates
#   from the first part of the assignment?
#Yes
#e. What is the impact of imputing missing data on the
#  estimates of the total daily number of steps?
#Both estimates decreased:
#mean decreased from 10766,19 to 9354.23
#median decreased from 10765 to 10395
## Are there differences in activity patterns between weekdays and weekends?
#1.  Create a new factor variable in the dataset with two levels – “weekday”
#   and “weekend” indicating whether a given date is a weekday or weekend day.
#a.create a vector of weekdays
wkdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#b. Convert to `factor` and specify the `levels/labels`
df_imputed$partofweek <-  factor((weekdays(df_imputed$date) %in% wkdays)+1L,
levels=1:2, labels=c('weekend', 'weekday'))
#c. activity$partofweek
aggregate(steps ~ partofweek, df_imputed, sum, na.rm=TRUE)
#2.  Make a panel plot containing a time series plot (i.e. type = "l")
#    of the 5-minute interval (x-axis) and the average number of steps taken,
#    averaged across all weekday days or weekend days (y-axis).
#a. Make two panel plot
par(mfrow=c(2,1))
#b. Gather the weekday data first
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate the weekday mean fisrt
wd <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot the average interval graph for weekdays
plot(wd$steps ~ wd$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#d. plot the average interval graph for weekdays
plot(wd$steps ~ wd$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#e. Gather the weekday data first
weekend <- subset(df_imputed, partofweek=="weekend")
#f. calculate the weekday mean fisrt
we <- aggregate(steps ~ interval, weekend, mean, na.rm=TRUE)
#g. plot the average interval graph for weekends
plot(we, type="l", xlab="Weekend 5-min Interval", ylab="Average Steps")
# Reproducible Research: Course Project 1
## Loading and preprocessing the data
#1.  Load the Data
#a. Set working directory
setwd("C:/Users/david/Desktop/reproducibleresearch/courseproject1")
#b. Download activity file
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","activity.zip")
#c. Unzip activity file
unzip("activity.zip")
#d. Read activity file
df <- read.csv("activity.csv",sep=",")
#2. Process/transform the data (if necessary) into a format suitable for your analysis
#a.  Convert date to as.Date data type
df$date <- as.Date(df$date)
#b. provide information about activity file
str(df)
#c. return first records of activity file
head(df)
#d. return last records of activity file
tail(df)
## What is the mean total of steps taken per day?
#1. Calculate the total number of steps per day
# sum the total steps per day
total <- aggregate(steps ~ date, df, sum )
#2.  Make a histogram of the total number of steps taken per day
# plot the histogram and label
plot(total$steps ~ total$date, type="h", lwd = 5, ylab="Frequency (steps)", xlab="Activity Days")
#3. Calculate and report the mean and median of the total number of steps taken per day
#a. mean
mean(total$steps)
#b. median
median(total$steps)
##What is the average daily activity pattern?
#1.  Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#    and the average number of steps taken, averaged across all days (y-axis)
#a.  calculate mean steps by interval
df_interval <- aggregate(steps ~ interval, df, mean)
#b.  plotline chart and label
plot(df_interval$steps ~ df_interval$interval, type="l", xlab="5-min Intervals", ylab="Average Steps Taken")
#2.  Which 5-minute interval, on average across all the days in the dataset,
#    contains the maximum number of steps?
#a. maximum number of steps in df_interval
max_steps <- max(df_interval$steps)
#b. interval with maximum number of steps in df_interval
df_interval$interval[df_interval$steps==max_steps]
##Imputing missing values
#1 Calculate and report the total number of missing values in the dataset
sum(is.na(df$steps))
#2 Devise a strategy for filling in all of the missing values in the dataset.
##Fill in missing values(NA)  with 0
#3 Create a new dataset that is equal to the original
#  dataset but with the missing data (NA) filled in with 0.
#a.  create the new table to impute values for NA
df_imputed <- df
#b. replace NA with zero
df_imputed$steps[is.na(df_imputed$steps)] <- 0
#c. make sure there are no more NA's
sum(is.na(df_imputed$steps))
#4.  Make a histogram of the total number of steps taken each day
#a. sum the total steps per day
total_imputed  <- aggregate(steps ~ date, df_imputed, sum)
#b. plot histogram and label
plot(total_imputed$steps ~ total_imputed$date, type="h", lwd = 5, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
#c. Calculate and report the mean and median total number of steps taken per day.
mean(total_imputed$steps)
median(total_imputed$steps)
#d. Do these values differ from the estimates
#   from the first part of the assignment?
#Yes
#e. What is the impact of imputing missing data on the
#  estimates of the total daily number of steps?
#Both estimates decreased:
#mean decreased from 10766,19 to 9354.23
#median decreased from 10765 to 10395
## Are there differences in activity patterns between weekdays and weekends?
#1.  Create a new factor variable in the dataset with two levels – “weekday”
#   and “weekend” indicating whether a given date is a weekday or weekend day.
#a.create a vector of weekdays
wkdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#b. Convert to `factor` and specify the `levels/labels`
df_imputed$partofweek <-  factor((weekdays(df_imputed$date) %in% wkdays)+1L,
levels=1:2, labels=c('weekend', 'weekday'))
#c. activity$partofweek
aggregate(steps ~ partofweek, df_imputed, sum, na.rm=TRUE)
#2.  Make a panel plot containing a time series plot (i.e. type = "l")
#    of the 5-minute interval (x-axis) and the average number of steps taken,
#    averaged across all weekday days or weekend days (y-axis).
#a. Make two panel plot
par(mfrow=c(2,1))
#b. Gather the weekday data first
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate the weekday mean fisrt
wd <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot the average interval graph for weekdays
plot(wd$steps ~ wd$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#e. Gather the weekday data first
weekend <- subset(df_imputed, partofweek=="weekend")
#f. calculate the weekday mean fisrt
we <- aggregate(steps ~ interval, weekend, mean, na.rm=TRUE)
#g. plot the average interval graph for weekends
plot(we$steps ~ we$interval, type="l", xlab="Weekend 5-min Interval", ylab="Average Steps")
#a. Make two panel plot
par(mfrow=c(2,1))
#b. Gather the weekday data first
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate the weekday mean fisrt
wd <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot the average interval graph for weekdays
plot(wd$steps ~ wd$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#c. calculate the weekday mean fisrt
wd <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot the average interval graph for weekdays
plot(wd$steps ~ wd$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#e. Gather the weekday data first
weekend <- subset(df_imputed, partofweek=="weekend")
#f. calculate the weekday mean fisrt
we <- aggregate(steps ~ interval, weekend, mean, na.rm=TRUE)
#g. plot the average interval graph for weekends
plot(we$steps ~ we$interval, type="l", xlab="Weekend 5-min Interval", ylab="Average Steps")
subset(df_imputed, partofweek=="weekend")
df_imputed[df_imputed$partofweek=="weekend",]
subset(df_imputed, partofweek=="weekend")
df_imputed[df_imputed$partofweek=="weekend",]
wkdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#b. Convert to `factor` and specify the `levels/labels`
df_imputed$partofweek <-  factor((weekdays(df_imputed$date) %in% wkdays)+1L,
levels=1:2, labels=c('weekend', 'weekday'))
#c. activity$partofweek
aggregate(steps ~ partofweek, df_imputed, sum, na.rm=TRUE)
#2.  Make a panel plot containing a time series plot (i.e. type = "l")
#    of the 5-minute interval (x-axis) and the average number of steps taken,
#    averaged across all weekday days or weekend days (y-axis).
#a. Make two panel plot
par(mfrow=c(2,1))
#b. Subset weekday data
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate weekday mean
wd <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot average interval graph for weekdays
plot(wd$steps ~ wd$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#e. Subset weekend data
weekend <- df_imputed[df_imputed$partofweek=="weekend",]
#f. calculate weekend mean
we <- aggregate(steps ~ interval, weekend, mean, na.rm=TRUE)
#g. plot the average interval graph for weekends
plot(we$steps ~ we$interval, type="l", xlab="Weekend 5-min Interval", ylab="Average Steps")
# Reproducible Research: Course Project 1
## Loading and preprocessing the data
#1.  Load the Data
#a. Set working directory
setwd("C:/Users/david/Desktop/reproducibleresearch/courseproject1")
#b. Download activity file
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","activity.zip")
#c. Unzip activity file
unzip("activity.zip")
#d. Read activity file
df <- read.csv("activity.csv",sep=",")
#2. Process/transform the data (if necessary) into a format suitable for your analysis
#a.  Convert date to as.Date data type
df$date <- as.Date(df$date)
#b. provide information about activity file
str(df)
#c. return first records of activity file
head(df)
#d. return last records of activity file
tail(df)
## What is the mean total of steps taken per day?
#1. Calculate the total number of steps per day
total <- aggregate(steps ~ date, df, sum )
#2.  Make a histogram of the total number of steps taken per day
plot(total$steps ~ total$date, type="h", lwd = 5, ylab="Frequency (steps)", xlab="Activity Days")
#3. Calculate and report the mean and median of the total number of steps taken per day
#a. mean
mean(total$steps)
#b. median
median(total$steps)
##What is the average daily activity pattern?
#1.  Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#    and the average number of steps taken, averaged across all days (y-axis)
#a.  calculate mean steps by interval
df_interval <- aggregate(steps ~ interval, df, mean)
#b.  plot line chart and label
plot(df_interval$steps ~ df_interval$interval, type="l", xlab="5-min Intervals", ylab="Average Steps Taken")
#2.  Which 5-minute interval, on average across all the days in the dataset,
#    contains the maximum number of steps?
#a. maximum number of steps in df_interval
max_steps <- max(df_interval$steps)
#b. interval with maximum number of steps in df_interval
df_interval$interval[df_interval$steps==max_steps]
##Imputing missing values
#1 Calculate and report the total number of missing values in the dataset
sum(is.na(df$steps))
#2 Devise a strategy for filling in all of the missing values in the dataset.
##Fill in missing values(NA)  with 0
#3 Create a new dataset that is equal to the original
#  dataset but with the missing data (NA) filled in with 0.
#a.  create the new table to impute values for NA
df_imputed <- df
#b. replace NA with zero
df_imputed$steps[is.na(df_imputed$steps)] <- 0
#c. make sure there are no more NA's
sum(is.na(df_imputed$steps))
#4.  Make a histogram of the total number of steps taken each day
#a. sum the total steps per day
total_imputed  <- aggregate(steps ~ date, df_imputed, sum)
#b. plot histogram and label
plot(total_imputed$steps ~ total_imputed$date, type="h", lwd = 5, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
#c. Calculate and report the mean and median total number of steps taken per day.
#1. mean
mean(total_imputed$steps)
#2. median
median(total_imputed$steps)
#d. Do these values differ from the estimates
#   from the first part of the assignment?
#Yes
#e. What is the impact of imputing missing data on the
#  estimates of the total daily number of steps?
#Both estimates decreased:
#mean decreased from 10766,19 to 9354.23
#median decreased from 10765 to 10395
## Are there differences in activity patterns between weekdays and weekends?
#1.  Create a new factor variable in the dataset with two levels – “weekday”
#   and “weekend” indicating whether a given date is a weekday or weekend day.
#a.create a vector of weekdays
wkdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#b. Convert to `factor` and specify the `levels/labels`
df_imputed$partofweek <-  factor((weekdays(df_imputed$date) %in% wkdays)+1L,
levels=1:2, labels=c('weekend', 'weekday'))
#c. activity$partofweek
aggregate(steps ~ partofweek, df_imputed, sum, na.rm=TRUE)
#2.  Make a panel plot containing a time series plot (i.e. type = "l")
#    of the 5-minute interval (x-axis) and the average number of steps taken,
#    averaged across all weekday days or weekend days (y-axis).
#a. Make two panel plot
par(mfrow=c(2,1))
#b. Subset weekday data
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate weekday mean
wkday_interval <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot average interval graph for weekdays
plot(wkday_interval$steps ~ wkday_interval$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#e. Subset weekend data
weekend <- df_imputed[df_imputed$partofweek=="weekend",]
#f. calculate weekend mean
wkend_interval <- aggregate(steps ~ interval, weekend, mean, na.rm=TRUE)
#g. plot the average interval graph for weekends
plot(wkend_interval$steps ~ wkend_interval$interval, type="l", xlab="Weekend 5-min Interval", ylab="Average Steps")
# Reproducible Research: Course Project 1
## Loading and preprocessing the data
#1.  Load the Data
#a. Set working directory
setwd("C:/Users/david/Desktop/reproducibleresearch/courseproject1")
#b. Download activity file
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip","activity.zip")
#c. Unzip activity file
unzip("activity.zip")
#d. Read activity file
df <- read.csv("activity.csv",sep=",")
#2. Process/transform the data (if necessary) into a format suitable for your analysis
#a.  Convert date to as.Date data type
df$date <- as.Date(df$date)
#b. provide information about activity file
str(df)
#c. return first records of activity file
head(df)
#d. return last records of activity file
tail(df)
## What is the mean total of steps taken per day?
#1. Calculate the total number of steps per day
total <- aggregate(steps ~ date, df, sum )
#2.  Make a histogram of the total number of steps taken per day
plot(total$steps ~ total$date, type="h", lwd = 5, ylab="Frequency (steps)", xlab="Activity Days")
#3. Calculate and report the mean and median of the total number of steps taken per day
#a. mean
mean(total$steps)
#b. median
median(total$steps)
##What is the average daily activity pattern?
#1.  Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#    and the average number of steps taken, averaged across all days (y-axis)
#a.  calculate mean steps by interval
df_interval <- aggregate(steps ~ interval, df, mean)
#b.  plot line chart and label
plot(df_interval$steps ~ df_interval$interval, type="l", xlab="5-min Intervals", ylab="Average Steps Taken")
#2.  Which 5-minute interval, on average across all the days in the dataset,
#    contains the maximum number of steps?
#a. maximum number of steps in df_interval
max_steps <- max(df_interval$steps)
#b. interval with maximum number of steps in df_interval
df_interval$interval[df_interval$steps==max_steps]
##Imputing missing values
#1 Calculate and report the total number of missing values in the dataset
sum(is.na(df$steps))
#2 Devise a strategy for filling in all of the missing values in the dataset.
##Fill in missing values(NA)  with 0
#3 Create a new dataset that is equal to the original
#  dataset but with the missing data (NA) filled in with 0.
#a.  create the new table to impute values for NA
df_imputed <- df
#b. replace NA with zero
df_imputed$steps[is.na(df_imputed$steps)] <- 0
#c. make sure there are no more NA's
sum(is.na(df_imputed$steps))
#4.  Make a histogram of the total number of steps taken each day
#a. sum the total steps per day
total_imputed  <- aggregate(steps ~ date, df_imputed, sum)
#b. plot histogram and label
plot(total_imputed$steps ~ total_imputed$date, type="h", lwd = 5, ylab="Imputed Frequency (steps)", xlab="Imputed Activity Days")
#c. Calculate and report the mean and median total number of steps taken per day.
#1. mean
mean(total_imputed$steps)
#2. median
median(total_imputed$steps)
#d. Do these values differ from the estimates
#   from the first part of the assignment?
#Yes
#e. What is the impact of imputing missing data on the
#  estimates of the total daily number of steps?
#Both estimates decreased:
#mean decreased from 10766,19 to 9354.23
#median decreased from 10765 to 10395
## Are there differences in activity patterns between weekdays and weekends?
#1.  Create a new factor variable in the dataset with two levels – “weekday”
#   and “weekend” indicating whether a given date is a weekday or weekend day.
#a.create a vector of weekdays
wkdays <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
#b. Convert to `factor` and specify the `levels/labels`
df_imputed$partofweek <-  factor((weekdays(df_imputed$date) %in% wkdays)+1L,
levels=1:2, labels=c('weekend', 'weekday'))
#c. activity$partofweek
aggregate(steps ~ partofweek, df_imputed, sum, na.rm=TRUE)
#2.  Make a panel plot containing a time series plot (i.e. type = "l")
#    of the 5-minute interval (x-axis) and the average number of steps taken,
#    averaged across all weekday days or weekend days (y-axis).
#a. Make two panel plot
par(mfrow=c(2,1))
#b. Subset weekday data
weekday <- df_imputed[df_imputed$partofweek=="weekday",]
#c. calculate weekday mean
wkday_interval <- aggregate(steps ~ interval, weekday, mean, na.rm=TRUE)
#d. plot average interval graph for weekdays
plot(wkday_interval$steps ~ wkday_interval$interval, type="l", xlab="Weekday 5-min Interval", ylab="Average Steps")
#e. Subset weekend data
weekend <- df_imputed[df_imputed$partofweek=="weekend",]
#f. calculate weekend mean
wkend_interval <- aggregate(steps ~ interval, weekend, mean, na.rm=TRUE)
#g. plot the average interval graph for weekends
plot(wkend_interval$steps ~ wkend_interval$interval, type="l", xlab="Weekend 5-min Interval", ylab="Average Steps")
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=TRUE}
plot(cars)
